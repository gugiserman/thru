{"version":3,"sources":["../node_modules/domready/ready.js","components/Game.js","components/World.js","components/Player.js","components/index.js","index.js"],"names":["Game","container","canvas","getContext","world","World","player","Player","setup","then","resize","bind","render","Promise","resolve","window","imageSmoothingEnabled","screen","orientation","lock","catch","silently","innerWidth","innerHeight","width","height","animationId","requestAnimationFrame","onbeforeunload","cancelAnimationFrame","addEventListener","clearRect","tileSize","columns","rows","Math","floor","x1","y1","x2","y2","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","i","fromX","toX","toY","drawLine","fromY","size","x","getStartingX","y","getStartingY","fillStyle","rect","fill","init","document","getElementById"],"mappings":"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","file":"src.6d50934e.map","sourceRoot":"../src","sourcesContent":["/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n","import { World, Player } from './'\n\nclass Game {\n  constructor(container) {\n    this.container = container\n    this.canvas = container.getContext('2d')\n    this.world = new World(this.container, this.canvas)\n    this.player = new Player(this.container, this.canvas, this.world)\n\n    this.setup().then(() => {\n      this.resize(true)\n      this.bind()\n      this.render()\n    })\n  }\n\n  setup() {\n    return new Promise(resolve => {\n      this.canvas.imageSmoothingEnabled = false\n\n      if (window.screen && window.screen.orientation && window.screen.orientation.lock) {\n        return window.screen.orientation.lock('portrait')\n          .then(resolve)\n          .catch(resolve)\n      }\n    })\n  }\n\n  resize(silently = false) {\n    if (window.innerWidth > window.innerHeight) {\n      this.container.width = 960\n      this.container.height = 600\n    } else {\n      this.container.width = 600\n      this.container.height = 960\n    }\n\n    this.world.resize()\n    this.player.resize()\n\n    if (!silently) {\n      return this.render()\n    }\n  }\n\n  bind() {\n    const animationId = window.requestAnimationFrame(this.render.bind(this))\n    window.onbeforeunload = () => window.cancelAnimationFrame(animationId)\n    window.addEventListener('resize', () => this.resize())\n  }\n\n  render() {\n    this.canvas.clearRect(0, 0, this.container.width, this.container.height)\n\n    this.world.render()\n    this.player.render()\n  }\n}\n\nexport default Game\n","class World {\n  constructor(container, canvas) {\n    this.container = container\n    this.canvas = canvas\n\n    this.tileSize = 25\n    this.columns = 0\n    this.rows = 0\n\n    this.resize()\n  }\n\n  resize() {\n    this.columns = Math.floor(this.container.width / this.tileSize)\n    this.rows = Math.floor(this.container.height / this.tileSize)\n  }\n\n  drawLine(x1, y1, x2, y2) {\n    this.canvas.beginPath()\n    this.canvas.strokeStyle = '#fafafa'\n    this.canvas.lineWidth = 1\n    this.canvas.moveTo(x1, y1)\n    this.canvas.lineTo(x2, y2)\n    this.canvas.stroke()\n  }\n\n  render() {\n    for (let i = 0; i < (this.columns + 1); i++) {\n      const fromX = (i * this.tileSize)\n      const fromY = 0\n\n      const toX = fromX\n      const toY = this.container.height\n\n      this.drawLine(fromX, fromY, toX, toY)\n    }\n\n    for (let i = 0; i < (this.rows + 1); i++) {\n      const fromX = 0\n      const fromY = (i * this.tileSize)\n\n      const toX = this.container.width\n      const toY = fromY\n\n      this.drawLine(fromX, fromY, toX, toY)\n    }\n  }\n}\n\nexport default World\n","class Player {\n  constructor(container, canvas, world) {\n    this.container = container\n    this.canvas = canvas\n    this.world = world\n\n    this.size = this.world.tileSize\n    this.x = this.getStartingX()\n    this.y = this.getStartingY()\n\n    this.resize()\n  }\n\n  resize() {\n    if ((this.x < 0 || this.y < 0)) {\n      this.x = this.getStartingX()\n      this.y = this.getStartingY()\n    }\n  }\n\n  getStartingX() {\n    if (!this.world.columns) {\n      return -1\n    }\n\n    return Math.floor(this.world.columns / 2)\n  }\n\n  getStartingY() {\n    if (!this.world.rows) {\n      return -1\n    }\n\n    return Math.floor(this.world.rows / 1.5)\n  }\n\n  render() {\n    this.canvas.beginPath()\n    this.canvas.fillStyle = '#000000'\n    this.canvas.rect((this.x * this.size), (this.y * this.size), this.size, this.size)\n    this.canvas.fill()\n  }\n}\n\nexport default Player\n","export { default as Game } from './Game'\nexport { default as World } from './World'\nexport { default as Player } from './Player'\n","import 'normalize.css'\nimport domready from 'domready'\nimport { Game } from './components'\n\nconst init = () => {\n  return new Game(document.getElementById('thru'))\n}\n\ndomready(init)\n"]}