{"version":3,"sources":["../node_modules/domready/ready.js","components/Game.js","components/World.js","../node_modules/randomcolor/randomColor.js","components/Obstacle.js","components/Player.js","components/Score.js","components/index.js","index.js"],"names":["Game","container","canvas","getContext","world","World","score","Score","obstacles","Obstacle","handleObstacleFinished","bind","player","Player","touchInterval","touchIntervalCount","setup","then","resize","render","Promise","resolve","window","imageSmoothingEnabled","screen","orientation","lock","catch","silently","innerWidth","innerHeight","width","height","forEach","obstacle","event","preventDefault","stopPropagation","cancelBubble","returnValue","touches","targetX","pageX","targetY","pageY","centerX","Math","floor","moveLeft","moveRight","setTimeout","handleTouchStart","clearTimeout","addEventListener","handleTouchEnd","finishedObstacles","filter","finished","hidden","length","up","paint","hide","push","some","y","missingX","complete","spawnObstacle","x","collided","fill","down","collide","clearRect","checkCollision","points","requestAnimationFrame","tileSize","columns","rows","x1","y1","x2","y2","color","beginPath","strokeStyle","lineWidth","moveTo","lineTo","stroke","i","fromX","toX","toY","drawLine","fromY","undefined","index","positionalIndex","onFinish","getRandomMissingX","rate","_fill","getRandomFill","interval","random","clearInterval","finish","setInterval","fall","fillStyle","rect","loop","size","getStartingX","getStartingY","nextX","max","nextPoints","lost","font","textMetrics","measureText","fillText","init","document","getElementById"],"mappings":"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","file":"src.e2dff9a0.map","sourceRoot":"../src","sourcesContent":["/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n","import { World, Player, Obstacle, Score } from './'\n\nclass Game {\n  constructor(container) {\n    this.container = container\n    this.canvas = container.getContext('2d')\n\n    this.world = new World(this.container, this.canvas)\n    this.score = new Score(this.container, this.canvas, this.world)\n    this.obstacles = [new Obstacle(this.container, this.canvas, this.world, 0, 0, this.score, this.handleObstacleFinished.bind(this))]\n    this.player = new Player(this.container, this.canvas, this.world)\n\n    this.touchInterval = null\n    this.touchIntervalCount = 0\n\n    this.setup().then(() => {\n      this.resize(true)\n      this.bind()\n      this.render()\n    })\n  }\n\n  setup() {\n    return new Promise(resolve => {\n      this.canvas.imageSmoothingEnabled = false\n\n      if (window.screen && window.screen.orientation && window.screen.orientation.lock) {\n        return window.screen.orientation.lock('portrait')\n          .then(resolve)\n          .catch(resolve)\n      }\n    })\n  }\n\n  resize(silently = false) {\n    if (window.innerWidth > window.innerHeight) {\n      this.container.width = 1920\n      this.container.height = 1200\n    } else {\n      this.container.width = 1200\n      this.container.height = 1920\n    }\n\n    this.world.resize()\n    this.player.resize()\n    this.obstacles.forEach(obstacle => obstacle.resize())\n\n    if (!silently) {\n      return this.render()\n    }\n  }\n\n  handleTouchStart(event) {\n    event.preventDefault && event.preventDefault()\n    event.stopPropagation && event.stopPropagation()\n    event.cancelBubble = true\n    event.returnValue = false\n\n    const { pageX: targetX, pageY: targetY } = (event.touches[0] || {})\n\n    const centerX = Math.floor(window.innerWidth / 2)\n    const centerY = Math.floor(window.innerHeight / 2)\n\n    if (targetX < centerX) {\n      this.player.moveLeft()\n    } else {\n      this.player.moveRight()\n    }\n\n    this.touchInterval = window.setTimeout(() => {\n      this.touchIntervalCount++\n\n      this.handleTouchStart({\n        touches: [{\n          pageX: targetX,\n          pageY: targetY,\n        }],\n      }, true)\n    }, (100 - ((this.touchIntervalCount > 4 ? 4 : this.touchIntervalCount) * 17)))\n  }\n\n  handleTouchEnd() {\n    window.clearTimeout(this.touchInterval)\n    this.touchInterval = null\n    this.touchIntervalCount = 0\n  }\n\n  bind() {\n    window.addEventListener('resize', () => this.resize())\n    window.addEventListener('touchstart', this.handleTouchStart.bind(this))\n    window.addEventListener('touchend', this.handleTouchEnd.bind(this), false)\n    window.addEventListener('touchcancel', this.handleTouchEnd.bind(this), false)\n  }\n\n  handleObstacleFinished() {\n    const finishedObstacles = this.obstacles.filter(obstacle => obstacle.finished && !obstacle.hidden)\n\n    if (finishedObstacles.length > 7) {\n      this.score.up()\n      finishedObstacles.forEach(obstacle => obstacle.paint('#888888'))\n\n      window.setTimeout(() => {\n        finishedObstacles.forEach(obstacle => obstacle.hide())\n      }, 1000)\n    }\n  }\n\n  spawnObstacle() {\n    this.obstacles.push(\n      new Obstacle(\n        this.container,\n        this.canvas,\n        this.world,\n        this.obstacles.length,\n        (this.obstacles.length % 8),\n        this.score,\n        this.handleObstacleFinished.bind(this),\n      )\n    )\n  }\n\n  checkCollision() {\n    return this.obstacles.some(obstacle => {\n      if (obstacle.y > this.player.y && (obstacle.missingX >= 0)) {\n        obstacle.complete()\n        obstacle.paint('#333333')\n        this.spawnObstacle()\n      }\n\n      if (obstacle.y === this.player.y) {\n        if (obstacle.missingX !== this.player.x && !obstacle.collided) {\n          this.score.down()\n          obstacle.collide()\n          return false\n        } else {\n          this.player.paint(obstacle.fill)\n          return false\n        }\n      } else {\n        this.player.paint()\n        return false\n      }\n    })\n  }\n\n  render() {\n    this.canvas.clearRect(0, 0, this.container.width, this.container.height)\n\n    this.world.render()\n    this.score.render()\n    this.player.render()\n    this.obstacles.forEach(obstacle => obstacle.render())\n\n    this.checkCollision()\n\n    if (this.score.points < 0) {\n      this.score.render()\n      return null\n    }\n\n    window.requestAnimationFrame(this.render.bind(this))\n  }\n}\n\nexport default Game\n","class World {\n  constructor(container, canvas) {\n    this.container = container\n    this.canvas = canvas\n\n    this.tileSize = 0\n    this.columns = 0\n    this.rows = 0\n\n    this.resize()\n  }\n\n  resize() {\n    if (this.container.width && this.container.height) {\n      this.tileSize = 48\n      this.columns = Math.floor(this.container.width / this.tileSize)\n      this.rows = Math.floor(this.container.height / this.tileSize) - 1\n    }\n  }\n\n  drawLine(x1, y1, x2, y2, color = '#fafafa') {\n    this.canvas.beginPath()\n    this.canvas.strokeStyle = color\n    this.canvas.lineWidth = 1\n    this.canvas.moveTo(x1, y1)\n    this.canvas.lineTo(x2, y2)\n    this.canvas.stroke()\n  }\n\n  render() {\n    for (let i = 0; i < (this.columns + 1); i++) {\n      const fromX = (i * this.tileSize)\n      const fromY = 0\n\n      const toX = fromX\n      const toY = this.container.height\n\n      this.drawLine(fromX, fromY, toX, toY)\n    }\n\n    for (let i = 0; i < (this.rows + 1); i++) {\n      const fromX = 0\n      const fromY = (i * this.tileSize)\n\n      const toX = this.container.width\n      const toY = fromY\n\n      const color = (i === (this.rows - 7)) ? '#666666' : undefined\n\n      this.drawLine(fromX, fromY, toX, toY, color)\n    }\n  }\n}\n\nexport default World\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        // Since we're generating multiple colors,\n        // incremement the seed. Otherwise we'd just\n        // generate the same color each time...\n        if (seed && options.seed) options.seed += 1;\n\n        colors.push(randomColor(options));\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [19,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [47,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [63,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [179, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [258, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [283, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","import randomColor from 'randomcolor'\n\nclass Obstacle {\n  constructor(container, canvas, world, index, positionalIndex, score, onFinish) {\n    this.container = container\n    this.canvas = canvas\n    this.world = world\n    this.index = index\n    this.positionalIndex = positionalIndex\n\n    this.x = 0\n    this.y = 0\n    this.missingX = this.getRandomMissingX()\n    this.rate = ((.2 - (score.points * .01)) * 1000)\n\n    this._fill = this.getRandomFill()\n    this.fill = this._fill\n\n    this.collided = false\n    this.hidden = false\n    this.finished = false\n    this.interval = null\n\n    this.onFinish = onFinish\n  }\n\n  getRandomFill() {\n    return randomColor()\n  }\n\n  getRandomMissingX() {\n    if (!this.world.columns) {\n      return -1\n    }\n\n    return Math.floor(Math.random() * this.world.columns)\n  }\n\n  resize() {\n    if (this.missingX < 0) {\n      this.missingX = this.getRandomMissingX()\n    }\n  }\n\n  fall() {\n    if (this.y < (this.world.rows - this.positionalIndex)) {\n      this.y += 1\n\n      if (this.y >= (this.world.rows - this.positionalIndex)) {\n        window.clearInterval(this.interval)\n        this.interval = null\n        this.finish()\n      }\n    }\n  }\n\n  collide() {\n    this.collided = true\n  }\n\n  complete() {\n    this.missingX = -1\n  }\n\n  finish() {\n    this.finished = true\n    this.onFinish()\n  }\n\n  hide() {\n    this.hidden = true\n  }\n\n  loop() {\n    this.interval = window.setInterval(this.fall.bind(this), this.rate)\n  }\n\n  paint(color) {\n    this.fill = color || this._fill\n  }\n\n  render() {\n    if (this.hidden) {\n      return null\n    }\n\n    const { columns, tileSize } = this.world\n\n    for (let i = 0; i < this.world.columns; i++) {\n      if (i === this.missingX) {\n        continue\n      }\n\n      const x = (i * tileSize)\n      const y = (this.y * tileSize)\n\n      this.canvas.beginPath()\n      this.canvas.fillStyle = this.fill\n      this.canvas.strokeStyle = '#fafafa'\n      this.canvas.rect(x, y, tileSize, tileSize)\n      this.canvas.fill()\n\n      if (this.missingX >= 0) {\n        this.canvas.stroke()\n      }\n    }\n\n    if (this.world.columns > 0 && !this.interval) {\n      this.loop()\n    }\n  }\n}\n\nexport default Obstacle\n","class Player {\n  constructor(container, canvas, world) {\n    this.container = container\n    this.canvas = canvas\n    this.world = world\n\n    this.size = -1\n    this.fill = '#333333'\n    this.x = this.getStartingX()\n    this.y = this.getStartingY()\n\n    this.resize()\n  }\n\n  resize() {\n    if ((this.size < 0) && this.world.tileSize) {\n      this.size = this.world.tileSize\n    }\n\n    if ((this.x < 0 || this.y < 0)) {\n      this.x = this.getStartingX()\n      this.y = this.getStartingY()\n    }\n  }\n\n  getStartingX() {\n    if (!this.world.columns) {\n      return -1\n    }\n\n    return Math.floor(this.world.columns / 2)\n  }\n\n  getStartingY() {\n    if (!this.world.rows) {\n      return -1\n    }\n\n    return Math.floor(this.world.rows / 2)\n  }\n\n  moveLeft() {\n    const nextX = (this.x - 1)\n\n    if (nextX < 0) {\n      return false\n    }\n\n    return this.x = nextX\n  }\n\n  moveRight() {\n    const nextX = (this.x + 1)\n\n    if (nextX > (this.world.columns - 1)) {\n      return false\n    }\n\n    return this.x = nextX\n  }\n\n  paint(color = '#333333') {\n    this.fill = color\n  }\n\n  render() {\n    this.canvas.beginPath()\n    this.canvas.fillStyle = this.fill\n    this.canvas.strokeStyle = '#fafafa'\n    this.canvas.rect((this.x * this.size), (this.y * this.size), this.size, this.size)\n    this.canvas.fill()\n    this.canvas.stroke()\n  }\n}\n\nexport default Player\n","class Score {\n  constructor(container, canvas, world) {\n    this.container = container\n    this.canvas = canvas\n    this.world = world\n    this.points = 0\n    this.max = 0\n  }\n\n  up() {\n    const nextPoints = (this.points + 1)\n\n    if (nextPoints > this.max) {\n      this.max = nextPoints\n    }\n\n    this.points = nextPoints\n  }\n\n  down() {\n    this.points--\n  }\n\n  render() {\n    const { columns, tileSize } = this.world\n    const lost = (this.points < 0)\n\n    const x = (columns - 3.5) * tileSize\n    const y = 1.5 * tileSize\n\n    this.canvas.fillStyle = '#333333'\n    this.canvas.font = 'bold 32px Arial'\n\n    if (lost) {\n      const textMetrics = this.canvas.measureText(`Score: ${this.points}`)\n\n      this.canvas.clearRect(x, (y - 32), textMetrics.width, 32)\n      this.canvas.fillText(`Max Score: ${this.max}`, x - (tileSize * 1.5), y)\n    } else {\n      this.canvas.fillText(`Score: ${this.points}`, x, y)\n    }\n  }\n}\n\nexport default Score\n","export { default as Game } from './Game'\nexport { default as World } from './World'\nexport { default as Obstacle } from './Obstacle'\nexport { default as Player } from './Player'\nexport { default as Score } from './Score'\n","import 'normalize.css'\nimport domready from 'domready'\nimport { Game } from './components'\n\nconst init = () => {\n  return new Game(document.getElementById('thru'))\n}\n\ndomready(init)\n"]}